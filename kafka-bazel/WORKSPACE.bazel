
load(":configure.bzl", "kafka_configure")

kafka_configure(
    name = "kafka",
    overlay_path = "kafka-overlay",
    src_path = "../third_party/kafka",
)
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "rules_pkg",
    sha256 = "d20c951960ed77cb7b341c2a59488534e494d5ad1d30c4818c736d57772a9fef",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_pkg/releases/download/1.0.1/rules_pkg-1.0.1.tar.gz",
        "https://github.com/bazelbuild/rules_pkg/releases/download/1.0.1/rules_pkg-1.0.1.tar.gz",
    ],
)

load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")

rules_pkg_dependencies()

http_archive(
    name = "rules_python",
    sha256 = "690e0141724abb568267e003c7b6d9a54925df40c275a870a4d934161dc9dd53",
    strip_prefix = "rules_python-0.40.0",
    url = "https://github.com/bazelbuild/rules_python/releases/download/0.40.0/rules_python-0.40.0.tar.gz",
)

load("@rules_python//python:repositories.bzl", "py_repositories", "python_register_toolchains")

py_repositories()

python_register_toolchains(
    name = "python311",
    python_version = "3.11",
)

# Register custom toolchains ahead of those in rules_java so they take precedence
register_toolchains("@kafka//toolchains:java_11_toolchain_definition")

register_toolchains("@kafka//toolchains:java_17_toolchain_definition")

register_toolchains("@kafka//toolchains:java_21_toolchain_definition")

# Load specific version of rules_java so that the jdk version is fixed. The full jdk version can be found in
# https://github.com/bazelbuild/rules_java/blob/7.4.0/java/repositories.bzl
# This should be loaded before rules_jvm since later will load a different version if not loaded
# https://github.com/bazel-contrib/rules_jvm/blob/bf9a852622ff7bab53f8c686b20a60b4237bfbc5/repositories.bzl#L69-L74
http_archive(
    name = "rules_java",
    sha256 = "976ef08b49c929741f201790e59e3807c72ad81f428c8bc953cdbeff5fed15eb",
    urls = [
        "https://github.com/bazelbuild/rules_java/releases/download/7.4.0/rules_java-7.4.0.tar.gz",
    ],
)

load("@rules_java//java:repositories.bzl", "rules_java_dependencies", "rules_java_toolchains")

rules_java_dependencies()

rules_java_toolchains()

# Rule JVM
RULES_JVM_EXTERNAL_TAG = "6.0"

RULES_JVM_EXTERNAL_SHA = "85fd6bad58ac76cc3a27c8e051e4255ff9ccd8c92ba879670d195622e7c0a9b7"

# We should set this back to the official releases once this fork that supports
# exclusions within POM files is upstreamed and released.
# https://(broken link)
# https://(broken link)
#http_archive(
#    name = "rules_jvm_external",
#    sha256 = RULES_JVM_EXTERNAL_SHA,
#    strip_prefix = "rules_jvm_external-%s" % RULES_JVM_EXTERNAL_TAG,
#    url = "https://github.com/bazelbuild/rules_jvm_external/releases/download/%s/rules_jvm_external-%s.tar.gz" % (RULES_JVM_EXTERNAL_TAG, RULES_JVM_EXTERNAL_TAG),
#)
#
git_repository(
    name = "rules_jvm_external",
    commit = "5ec27150ced4eb331668009aabea7dd5176bd01f",
    remote = "https://github.com/confluentinc/rules_jvm_external.git",
)

load("@rules_jvm_external//:repositories.bzl", "rules_jvm_external_deps")

rules_jvm_external_deps()

load("@rules_jvm_external//:setup.bzl", "rules_jvm_external_setup")

rules_jvm_external_setup()

# Current delta between mainline and our fork:
#  * Add support for Checkstyle conversion to JUnit XML output
# https://github.com/bazel-contrib/rules_jvm/pull/283
# https://(broken link)
git_repository(
    name = "contrib_rules_jvm",
    commit = "11bc584e6a9297ca3033dabee21389f74d8437d0",
    remote = "https://github.com/bazel-contrib/rules_jvm.git",
)

load("@contrib_rules_jvm//:repositories.bzl", "contrib_rules_jvm_deps", "contrib_rules_jvm_gazelle_deps")

# apple rules lint
# This has to come before contrib_rules_jvm_deps because it also tries to import it
# more info about why: https://fzakaria.com/2024/08/29/bazel-workspace-chunking.html
http_archive(
    name = "apple_rules_lint",
    strip_prefix = "apple_rules_lint-0.4.0",
    sha256 = "483ea03d73d5fb33275d029da8d36811243fc32dfa4dc73a43acbb6f4b1af621",
    url = "https://github.com/apple/apple_rules_lint/releases/download/0.4.0/apple_rules_lint-0.4.0.tar.gz",
)

contrib_rules_jvm_deps()

contrib_rules_jvm_gazelle_deps()

http_archive(
    name = "io_bazel_rules_go",
    sha256 = "91585017debb61982f7054c9688857a2ad1fd823fc3f9cb05048b0025c47d023",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.42.0/rules_go-v0.42.0.zip",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.42.0/rules_go-v0.42.0.zip",
    ],
)

http_archive(
    name = "bazel_gazelle",
    sha256 = "aefbf2fc7c7616c9ed73aa3d51c77100724d5b3ce66cfa16406e8c13e87c8b52",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.41.0/bazel-gazelle-v0.41.0.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.41.0/bazel-gazelle-v0.41.0.tar.gz",
    ],
)

PROTOBUF_VERSION = "25.1"

PROTOBUF_HASH = "9bd87b8280ef720d3240514f884e56a712f2218f0d693b48050c836028940a42"

# Using rules_proto 6.0.0-rc0 (https://github.com/bazelbuild/rules_proto/releases/tag/6.0.0-rc0)
# to use protobuf 24.4 and protobuf-java 3.24.4, matching the version in dependencies.bzl.
http_archive(
    name = "com_google_protobuf",
    sha256 = PROTOBUF_HASH,
    strip_prefix = "protobuf-{version}".format(version = PROTOBUF_VERSION),
    urls = ["https://github.com/protocolbuffers/protobuf/archive/v{version}.tar.gz".format(version = PROTOBUF_VERSION)],
)

# Why does this exist here? Well grpc-java pulls in two repositories that are effectively the same
# io_grpc_grpc_proto & com_google_protobuf_javalite(). They must also be at the same version to work.
# rules_jvm-contrib pulls in grpc-java and sets up the repository. Above, we change the protobuf version to
# something other than is declared in rules_jvm-contrib which leads us to have a diamond dependency conflict.
# We have no code that actually uses this but if you do a query of all dependencies then it will try to be
# resolved.
http_archive(
    name = "com_google_protobuf_javalite",
    sha256 = PROTOBUF_HASH,
    strip_prefix = "protobuf-{version}".format(version = PROTOBUF_VERSION),
    urls = ["https://github.com/protocolbuffers/protobuf/archive/v{version}.tar.gz".format(version = PROTOBUF_VERSION)],
)

load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")

protobuf_deps()

http_archive(
    name = "rules_proto",
    sha256 = "903af49528dc37ad2adbb744b317da520f133bc1cbbecbdd2a6c546c9ead080b",
    strip_prefix = "rules_proto-6.0.0-rc0",
    url = "https://github.com/bazelbuild/rules_proto/releases/download/6.0.0-rc0/rules_proto-6.0.0-rc0.tar.gz",
)

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")

rules_proto_dependencies()

rules_proto_toolchains()

http_archive(
    name = "bazel_skylib",
    sha256 = "bc283cdfcd526a52c3201279cda4bc298652efa898b10b4db0837dc51652756f",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.7.1/bazel-skylib-1.7.1.tar.gz",
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.7.1/bazel-skylib-1.7.1.tar.gz",
    ],
)

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")
load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

go_rules_dependencies()

go_register_toolchains(version = "1.19.5")

gazelle_dependencies(go_repository_default_config = "//:WORKSPACE.bazel")

go_repository(
    name = "org_golang_google_grpc",
    build_file_proto_mode = "disable",
    importpath = "google.golang.org/grpc",
    sum = "h1:SfXqXS5hkufcdZ/mHtYCh53P2b+92WQq/DZcKLgsFRs=",
    version = "v1.31.1",
)

#############################################################
# Define your own dependencies here using go_repository.
# Else, dependencies declared by rules_go/gazelle will be used
# The first declaration of an external repository "wins".
############################################################

# for linters config
load("@apple_rules_lint//lint:setup.bzl", "lint_setup")

lint_setup({
    "java-checkstyle": "@kafka//checkstyle:checkstyle_config",
    "java-spotbugs": "@kafka//gradle:spotbugs_config",
})

load("@contrib_rules_jvm//:setup.bzl", "contrib_rules_jvm_setup")

contrib_rules_jvm_setup()

load("@contrib_rules_jvm//:gazelle_setup.bzl", "contrib_rules_jvm_gazelle_setup")

contrib_rules_jvm_gazelle_setup()

# We should set this back after the upstream rules_scala supports scala version 2.13.14
### rules_scala
# http_archive(
#     name = "io_bazel_rules_scala",
#     sha256 = "e734eef95cf26c0171566bdc24d83bd82bdaf8ca7873bec6ce9b0d524bdaf05d",
#     strip_prefix = "rules_scala-6.6.0",
#     url = "https://github.com/bazelbuild/rules_scala/releases/download/v6.6.0/rules_scala-v6.6.0.tar.gz",
# )

git_repository(
    name = "io_bazel_rules_scala",
    commit = "8f7fc6d21249415f45f80ad498641461e4777767",
    remote = "https://github.com/confluentinc/rules_scala.git",
)

local_repository(
    name = "scala_multiverse",
    path = "kafka-overlay/scala_tools/local_repos/default",
)

load("@io_bazel_rules_scala//:scala_config.bzl", "scala_config")

scala_config(
    scala_version = "2.13.14",  # Default Scala version
    scala_versions = [
        "2.12.18",
        "2.13.14",
    ],
)

load("@io_bazel_rules_scala//scala:scala.bzl", "rules_scala_setup", "rules_scala_toolchain_deps_repositories")

# loads other rules Rules Scala depends on
rules_scala_setup()

# Loads Maven deps like Scala compiler and standard libs. On production projects you should consider
# defining a custom deps toolchains to use your project libs instead
rules_scala_toolchain_deps_repositories(fetch_sources = True)

register_toolchains("@kafka//toolchains:default_toolchain")

rules_jvm_external_setup()

load("@rules_jvm_external//:defs.bzl", "maven_install")
load(
    "@kafka//dependencies:dependencies.bzl",
    "REPIN_INSTRUCTIONS",
    "libs",
    "maven_install_alternative_easymock",
    "maven_install_alternative_mockito",
    "maven_install_compile_only",
    "maven_install_kafka_streams_versions",
    DEPS_VERSIONS = "versions",
)

LIBS = list(libs.values())

maven_install(
    artifacts = LIBS,
    excluded_artifacts = [
        "org.scala-lang:scala-library",
        "org.scala-lang:scala-reflect",
        "org.scala-lang:scala-compiler",
        "log4j:log4j",
    ],
    fail_if_repin_required = True,
    fetch_sources = True,
    maven_install_json = "@kafka//dependencies:maven_install.json",
    repin_instructions = REPIN_INSTRUCTIONS,
    repositories = [
        # Private repositories are supported through HTTP Basic auth
        "https://repo1.maven.org/maven2",
        "https://packages.confluent.io/maven/",
    ],
    use_credentials_from_home_netrc_file = True,
    version_conflict_policy = "pinned",
)

load("@maven//:defs.bzl", "pinned_maven_install")

pinned_maven_install()

maven_install_kafka_streams_versions()

load("@maven_kafka_streams_0100//:defs.bzl", kafka_streams_0100_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_0101//:defs.bzl", kafka_streams_0101_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_0102//:defs.bzl", kafka_streams_0102_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_0110//:defs.bzl", kafka_streams_0110_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_10//:defs.bzl", kafka_streams_10_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_11//:defs.bzl", kafka_streams_11_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_20//:defs.bzl", kafka_streams_20_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_21//:defs.bzl", kafka_streams_21_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_22//:defs.bzl", kafka_streams_22_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_23//:defs.bzl", kafka_streams_23_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_24//:defs.bzl", kafka_streams_24_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_25//:defs.bzl", kafka_streams_25_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_26//:defs.bzl", kafka_streams_26_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_27//:defs.bzl", kafka_streams_27_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_28//:defs.bzl", kafka_streams_28_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_30//:defs.bzl", kafka_streams_30_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_31//:defs.bzl", kafka_streams_31_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_32//:defs.bzl", kafka_streams_32_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_33//:defs.bzl", kafka_streams_33_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_34//:defs.bzl", kafka_streams_34_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_35//:defs.bzl", kafka_streams_35_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_36//:defs.bzl", kafka_streams_36_pinned_install = "pinned_maven_install")
load("@maven_kafka_streams_37//:defs.bzl", kafka_streams_37_pinned_install = "pinned_maven_install")

kafka_streams_10_pinned_install()

kafka_streams_11_pinned_install()

kafka_streams_20_pinned_install()

kafka_streams_21_pinned_install()

kafka_streams_22_pinned_install()

kafka_streams_23_pinned_install()

kafka_streams_24_pinned_install()

kafka_streams_25_pinned_install()

kafka_streams_26_pinned_install()

kafka_streams_27_pinned_install()

kafka_streams_28_pinned_install()

kafka_streams_30_pinned_install()

kafka_streams_31_pinned_install()

kafka_streams_32_pinned_install()

kafka_streams_33_pinned_install()

kafka_streams_34_pinned_install()

kafka_streams_35_pinned_install()

kafka_streams_36_pinned_install()

kafka_streams_37_pinned_install()

kafka_streams_0100_pinned_install()

kafka_streams_0101_pinned_install()

kafka_streams_0102_pinned_install()

kafka_streams_0110_pinned_install()

maven_install_compile_only()

load("@maven_compile_only//:defs.bzl", maven_compile_only_pinned_install = "pinned_maven_install")

maven_compile_only_pinned_install()

maven_install_alternative_mockito()

maven_install_alternative_easymock()

load("@maven_alt_mockito_4_9//:defs.bzl", mockito_4_9_pinned_install = "pinned_maven_install")

mockito_4_9_pinned_install()

load("@maven_alt_mockito_4_11//:defs.bzl", mockito_4_11_pinned_install = "pinned_maven_install")

mockito_4_11_pinned_install()

load("@maven_alt_easymock_4_3//:defs.bzl", easymock_4_3_pinned_install = "pinned_maven_install")

easymock_4_3_pinned_install()

# for avro plugin
RULES_AVRO_VERSION = "a4c607a5610bea5649b1fb466ea8abcd9916121b"

RULES_AVRO_SHA256 = "aebc8fc6f8a6a3476d8e8f6f6878fc1cf7a253399e1b2668963e896512be1cc6"

http_archive(
    name = "io_bazel_rules_avro",
    sha256 = RULES_AVRO_SHA256,
    strip_prefix = "rules_avro-%s" % RULES_AVRO_VERSION,
    url = "https://github.com/chenrui333/rules_avro/archive/%s.tar.gz" % RULES_AVRO_VERSION,
)

load("@io_bazel_rules_avro//avro:avro.bzl", "avro_repositories")

avro_repositories(version = "1.11.0")

# for jmh benchmark
http_archive(
    name = "rules_jmh",
    sha256 = "dbb7d7e5ec6e932eddd41b910691231ffd7b428dff1ef9a24e4a9a59c1a1762d",
    strip_prefix = "buchgr-rules_jmh-6ccf8d7",
    type = "zip",
    url = "https://github.com/buchgr/rules_jmh/zipball/6ccf8d7b270083982e5c143935704b9f3f18b256",
)

load("@rules_jmh//:deps.bzl", "rules_jmh_deps")

rules_jmh_deps()

load("@rules_jmh//:defs.bzl", "rules_jmh_maven_deps")

rules_jmh_maven_deps()

http_archive(
    name = "aspect_bazel_lib",
    sha256 = "7b39d9f38b82260a8151b18dd4a6219d2d7fc4a0ac313d4f5a630ae6907d205d",
    strip_prefix = "bazel-lib-2.10.0",
    url = "https://github.com/aspect-build/bazel-lib/releases/download/v2.10.0/bazel-lib-v2.10.0.tar.gz",
)

load("@aspect_bazel_lib//lib:repositories.bzl", "aspect_bazel_lib_dependencies", "aspect_bazel_lib_register_toolchains")

# Required bazel-lib dependencies

aspect_bazel_lib_dependencies()

# Register bazel-lib toolchains

aspect_bazel_lib_register_toolchains()


http_archive(
    name = "rules_oci",
    patch_args = [
        "-p1",
    ],
    # This patch is generated from https://github.com/bazel-contrib/rules_oci/pull/672
    # until the next release of rules_oci
    patches = [
        "@kafka//tools-bazel:1_oci.patch",
    ],
    sha256 = "311e78803a4161688cc79679c0fb95c56445a893868320a3caf174ff6e2c383b",
    strip_prefix = "rules_oci-2.0.0-beta2",
    url = "https://github.com/bazel-contrib/rules_oci/releases/download/v2.0.0-beta2/rules_oci-v2.0.0-beta2.tar.gz",
)

load("@rules_oci//oci:dependencies.bzl", "rules_oci_dependencies")

rules_oci_dependencies()

load("@rules_oci//oci:repositories.bzl", "oci_register_toolchains")

oci_register_toolchains(name = "oci")

http_archive(
    name = "container_structure_test",
    sha256 = "4cbb382d3d7edc97129f79f83196c95e6006d9063d9edbb33a2311ba9372ad39",
    strip_prefix = "container-structure-test-1.19.3",
    urls = ["https://github.com/GoogleContainerTools/container-structure-test/archive/refs/tags/v1.19.3.zip"],
)

load("@container_structure_test//:repositories.bzl", "container_structure_test_register_toolchain")

container_structure_test_register_toolchain(name = "cst")

http_archive(
    name = "bazel_jar_jar",
    sha256 = "a9d2ca9a2e9014f8d63dcbe9091bcb9f2d2929b3b7d16836c6225e98f9ca54df",
    strip_prefix = "bazel_jar_jar-0.1.5",
    url = "https://github.com/bazeltools/bazel_jar_jar/releases/download/v0.1.5/bazel_jar_jar-v0.1.5.tar.gz",
)

load(
    "@bazel_jar_jar//:jar_jar.bzl",
    "jar_jar_repositories",
)

jar_jar_repositories()

http_archive(
    name = "rules_multirun",
    sha256 = "9cd384e42b2da00104f0e18f25e66285aa21f64b573c667638a7a213206885ab",
    strip_prefix = "rules_multirun-0.6.1",
    url = "https://github.com/keith/rules_multirun/archive/refs/tags/0.6.1.tar.gz",
)

