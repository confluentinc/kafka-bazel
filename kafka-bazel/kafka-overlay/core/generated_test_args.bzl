# This file is generated by bazel_tag_reader.py. Edits will be overwritten by
# bazel run //:gen_tags
per_test_args = {
    "src/test/java/kafka/admin/ConfigCommandIntegrationTest.java": {
        "tags": [
            "integration"
        ]
    },
    "src/test/java/kafka/admin/ConfigCommandTopicTypeIntegrationTest.java": {
        "tags": [
            "integration"
        ]
    },
    "src/test/java/kafka/server/LogManagerIntegrationTest.java": {
        "tags": [
            "integration"
        ]
    },
    "src/test/java/kafka/tier/raft/KRaftSnapshotManagerIntegrationTest.java": {
        "tags": [
            "integration"
        ]
    },
    "src/test/java/kafka/tier/state/SegmentAndMetadataLayoutPropertyTest.java": {
        "tags": [
            "propertybased"
        ]
    },
    "src/test/scala/integration/kafka/admin/AdminFenceProducersIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/admin/RemoteTopicCrudTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala": {
        "shard_count": 4,
        "size": "large"
    },
    "src/test/scala/integration/kafka/api/BaseAsyncConsumerTest.scala": {
        "size": "large"
    },
    "src/test/scala/integration/kafka/api/DelegationTokenEndToEndAuthorizationTest.scala": {
        "shard_count": 3
    },
    "src/test/scala/integration/kafka/api/DelegationTokenEndToEndAuthorizationWithOwnerTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/integration/kafka/api/GroupEndToEndAuthorizationTest.scala": {
        "shard_count": 3
    },
    "src/test/scala/integration/kafka/api/PlaintextAdminIntegrationTest.scala": {
        "shard_count": 6,
        "size": "large"
    },
    "src/test/scala/integration/kafka/api/PlaintextConsumerAssignTest.scala": {
        "shard_count": 4
    },
    "src/test/scala/integration/kafka/api/PlaintextConsumerAssignorsTest.scala": {
        "shard_count": 4
    },
    "src/test/scala/integration/kafka/api/PlaintextConsumerCommitTest.scala": {
        "shard_count": 4
    },
    "src/test/scala/integration/kafka/api/PlaintextConsumerFetchTest.scala": {
        "shard_count": 4
    },
    "src/test/scala/integration/kafka/api/PlaintextConsumerPollTest.scala": {
        "shard_count": 4
    },
    "src/test/scala/integration/kafka/api/PlaintextConsumerSubscriptionTest.scala": {
        "shard_count": 4
    },
    "src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala": {
        "shard_count": 13,
        "size": "large"
    },
    "src/test/scala/integration/kafka/api/PlaintextProducerSendTest.scala": {
        "shard_count": 4
    },
    "src/test/scala/integration/kafka/api/SaslGssapiSslEndToEndAuthorizationTest.scala": {
        "shard_count": 4,
        "size": "large"
    },
    "src/test/scala/integration/kafka/api/SaslMultiMechanismConsumerTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/integration/kafka/api/SaslOAuthBearerSslEndToEndAuthorizationTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/integration/kafka/api/SaslPlainPlaintextConsumerTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/integration/kafka/api/SaslPlainSslEndToEndAuthorizationTest.scala": {
        "shard_count": 3
    },
    "src/test/scala/integration/kafka/api/SaslPlaintextConsumerTest.scala": {
        "shard_count": 2,
        "size": "large"
    },
    "src/test/scala/integration/kafka/api/SaslScramSslEndToEndAuthorizationTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/integration/kafka/api/SaslSslAdminIntegrationTest.scala": {
        "tags": [
            "cpu:5"
        ]
    },
    "src/test/scala/integration/kafka/api/SaslSslConsumerTest.scala": {
        "tags": [
            "cpu:5"
        ]
    },
    "src/test/scala/integration/kafka/api/SslConsumerTest.scala": {
        "shard_count": 4,
        "size": "large"
    },
    "src/test/scala/integration/kafka/api/SslEndToEndAuthorizationTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/integration/kafka/api/SslProducerSendTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/integration/kafka/api/TierFeatureAdminIntegrationTest.scala": {
        "shard_count": 11
    },
    "src/test/scala/integration/kafka/api/TransactionsTest.scala": {
        "shard_count": 12,
        "size": "large"
    },
    "src/test/scala/integration/kafka/api/UserQuotaTest.scala": {
        "size": "large"
    },
    "src/test/scala/integration/kafka/catalog/KRaftMetadataCollectorIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/catalog/ZKMetadataCollectorIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/AbstractClusterLinkIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/BidirectionalLinkIntegrationTest.scala": {
        "shard_count": 10,
        "size": "large",
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkAsyncTaskIntegrationTest.scala": {
        "shard_count": 11,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkAuthorizationTest.scala": {
        "shard_count": 5,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkAutoCreateMirrorIntegrationTest.scala": {
        "size": "large",
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkControlPlaneLinkConfigResourceIntegrationTest.scala": {
        "shard_count": 3,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkControlPlaneLinkResourceIntegrationTest.scala": {
        "shard_count": 7,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkControlPlaneMirrorResourceIntegrationTest.scala": {
        "shard_count": 5,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkDRIntegrationTest.scala": {
        "shard_count": 5,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkDataPlaneMirroringIntegrationTest.scala": {
        "size": "large",
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkDurabilityAuditIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkFailureTest.scala": {
        "shard_count": 14,
        "size": "large",
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkIbp26Test.scala": {
        "shard_count": 4,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkIsrTest.scala": {
        "shard_count": 3,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkMetricsIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkMetricsReductionIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkPolicyTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkQuotaIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkRequestRoutingIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkSslTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/ClusterLinkTierIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/CompactedMirrorTopicTest.scala": {
        "shard_count": 4,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/LinkCoordinatorIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/MirrorTopicConfigSyncRulesTest.scala": {
        "shard_count": 6,
        "size": "large",
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/SourceInitiatedLinkAsyncTaskIntegrationTest.scala": {
        "shard_count": 5,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/SourceInitiatedLinkAuthorizationTest.scala": {
        "shard_count": 4,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/SourceInitiatedLinkControlPlaneLinkConfigResourceIntegrationTest.scala": {
        "shard_count": 3,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/SourceInitiatedLinkControlPlaneLinkResourceIntegrationTest.scala": {
        "shard_count": 13,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/SourceInitiatedLinkControlPlaneMirrorResourceIntegrationTest.scala": {
        "size": "large",
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/SourceInitiatedLinkDRIntegrationTest.scala": {
        "shard_count": 7,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/SourceInitiatedLinkDataPlaneMirroringIntegrationTest.scala": {
        "shard_count": 11,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/SourceInitiatedLinkFailureTest.scala": {
        "shard_count": 9,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/link/SourceInitiatedLinkMetricsIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/log/Generators.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/log/MergedLogPropertyTest.scala": {
        "shard_count": 7,
        "size": "large",
        "tags": [
            "propertybased",
            "cpu:2"
        ]
    },
    "src/test/scala/integration/kafka/server/ConfluentObserverTest.scala": {
        "shard_count": 11,
        "size": "large"
    },
    "src/test/scala/integration/kafka/server/CreateTopicWithoutPartitionCountAfterSnapshotLoadTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala": {
        "shard_count": 11,
        "size": "large"
    },
    "src/test/scala/integration/kafka/server/KRaftClusterTest.scala": {
        "shard_count": 8,
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/server/KafkaServerKRaftRegistrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/server/PushReplicationIntegrationTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/integration/kafka/server/QuorumTestHarness.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/server/StrayPartitionIntegrationTest.scala": {
        "shard_count": 4
    },
    "src/test/scala/integration/kafka/tier/DisableTierStorageTest.scala": {
        "shard_count": 6
    },
    "src/test/scala/integration/kafka/tier/TierAbortedTxnReaderPropertyTest.scala": {
        "tags": [
            "propertybased"
        ]
    },
    "src/test/scala/integration/kafka/tier/TierCompactionEndToEndTest.scala": {
        "shard_count": 8
    },
    "src/test/scala/integration/kafka/tier/TierCompactionIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/tier/TierIntegrationChecksummedTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/tier/TierIntegrationEndToEndTest.scala": {
        "shard_count": 5
    },
    "src/test/scala/integration/kafka/tier/TierIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/tier/TierProducerStateReplicationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/tier/TierTopicDataLossValidatorIntegrationTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/integration/kafka/tier/TierTopicDeletionIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/tier/TierTopicManagerIdempotentProducerIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/tier/domain/TierObjectMetadataSerdePropertyTest.scala": {
        "tags": [
            "propertybased"
        ]
    },
    "src/test/scala/integration/kafka/tier/fetcher/TierSegmentReaderPropertyTest.scala": {
        "tags": [
            "propertybased"
        ]
    },
    "src/test/scala/integration/kafka/tier/management/TieredPartitionRecoveryTest.scala": {
        "shard_count": 3
    },
    "src/test/scala/integration/kafka/tier/snapshot/TierPartitionStateSnapshotTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/tier/tasks/archive/ArchiveTaskIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/tier/tasks/archive/UpdatableQueuePropertyTest.scala": {
        "tags": [
            "propertybased"
        ]
    },
    "src/test/scala/integration/kafka/tier/tools/SelectFileTierPartitionStateIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/tier/tools/TierPartitionStateBulkEventsFencingTriggerIntegrationTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/integration/kafka/tier/tools/TierPartitionStateFencingIntegrationTriggerTest.scala": {
        "shard_count": 11,
        "size": "large",
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/tier/tools/TierRecoveryDataUploadIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/integration/kafka/zk/ZkMigrationIntegrationTest.scala": {
        "shard_count": 3,
        "size": "large",
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/kafka/log/LogSegmentPropertyTest.scala": {
        "tags": [
            "propertybased"
        ]
    },
    "src/test/scala/kafka/tier/state/TierPartitionStatePropertyTest.scala": {
        "tags": [
            "propertybased"
        ]
    },
    "src/test/scala/unit/kafka/cluster/PartitionTest.scala": {
        "size": "large"
    },
    "src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala": {
        "shard_count": 3,
        "size": "large"
    },
    "src/test/scala/unit/kafka/integration/DurabilityAuditIntegrationTest.scala": {
        "shard_count": 5,
        "size": "large"
    },
    "src/test/scala/unit/kafka/log/AbstractLogCleanerIntegrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/log/LogCleanerLagIntegrationTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/unit/kafka/log/LogCleanerParameterizedIntegrationTest.scala": {
        "shard_count": 3,
        "size": "large"
    },
    "src/test/scala/unit/kafka/log/LogLoaderTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/unit/kafka/log/LogManagerTest.scala": {
        "size": "large",
        "tags": [
            "cpu:2"
        ]
    },
    "src/test/scala/unit/kafka/log/MergedLogTierCompactEnabledTest.scala": {
        "size": "large"
    },
    "src/test/scala/unit/kafka/metrics/ConsumerLagEmitterIntegrationTest.scala": {
        "size": "large"
    },
    "src/test/scala/unit/kafka/migration/MigrationTierTopicProducerTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/unit/kafka/network/ReverseConnectionTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/unit/kafka/network/SocketServerTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/unit/kafka/server/AbstractApiVersionsRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/AllocateProducerIdsRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/AlterMirrorsRequestTest.scala": {
        "size": "large",
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/BrokerHealthTest.scala": {
        "tags": [
            "cpu:2"
        ]
    },
    "src/test/scala/unit/kafka/server/BrokerRegistrationRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/ClusterLinksRequestTest.scala": {
        "shard_count": 19,
        "size": "large",
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/ConsumerGroupDescribeRequestsTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/ConsumerGroupHeartbeatRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/ConsumerProtocolMigrationTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/ControllerMutationQuotaTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/unit/kafka/server/DelegationTokenRequestsTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/unit/kafka/server/DeleteGroupsRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/DescribeGroupsRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/DescribeQuorumRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/HeartbeatRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/JoinGroupRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/LeaveGroupRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/ListGroupsRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/LogOffsetTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/unit/kafka/server/OffsetCommitRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/OffsetDeleteRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/OffsetFetchRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/ReplicaManagerTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/unit/kafka/server/ReplicationQuotasTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/unit/kafka/server/RequestQuotaTest.scala": {
        "shard_count": 2
    },
    "src/test/scala/unit/kafka/server/SyncGroupRequestTest.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/TopicRequestsVersionCompatibilityTests.scala": {
        "tags": [
            "integration"
        ]
    },
    "src/test/scala/unit/kafka/server/link/MirrorTopicConfigSyncRulesTest.scala": {
        "shard_count": 6
    }
}
