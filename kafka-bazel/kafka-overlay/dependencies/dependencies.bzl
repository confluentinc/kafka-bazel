load("@rules_jvm_external//:defs.bzl", "artifact", "maven_install")
load("@rules_jvm_external//:specs.bzl", "maven")

REPIN_INSTRUCTIONS = " REPIN=1 bazel run //:repin_maven"

_libs = {}
_versions = {}

# a higher minimum Java requirement than Kafka. This was previously the case for Scala 2.12 and Java 7.
availableScalaVersions = ["2.12", "2.13"]

defaultScala212Version = "2.12.19"
defaultScala213Version = "2.13.14"

_versions["scala"] = defaultScala212Version

# Resolve base Scala version according to these patterns:
# 1. generally available Scala versions (such as: 2.12.y and 2.13.z) corresponding base versions will be: 2.12 and 2.13 (respectively)
# 2. pre-release Scala versions (i.e. milestone/rc, such as: 2.13.0-M5, 2.13.0-RC1, 2.14.0-M1, etc.) will have identical base versions;
#    rationale: pre-release Scala versions are not binary compatible with each other and that's the reason why libraries include the full
#    Scala release string in their name for pre-releases (see dependencies below with an artifact name suffix '_$versions.baseScala')
#

versions = _versions | {
    "akka": "2.5.31",
    "activation": "2.1.1",
    "amazonCrt": "0.30.5",
    "amazonSdkVersion": "1.12.746",
    "amazonSdkVersionV2": "2.26.27",
    "apacheda": "1.0.2",
    "apachedaLdapCodec": "1.0.0",
    "apacheds": "2.0.0-M24",
    "apachesshd": "2.10.0",
    "apiserverClient": "0.2502.0",
    "argparse4j": "0.7.0",
    "assertj": "3.24.2",
    "auditlogEmitterCommon": "1.84.0",
    "avro": "1.11.3",
    "azureCore": "1.49.1",
    "azureIdentity": "1.13.0",
    "azureStorageBlob": "12.26.1",
    # We MUST pin this specific version that has a valid FIPS certificate
    "bc_fips": "2.0.0",
    "bcpkix_fips": "1.0.6",
    "bctls_fips": "1.0.19",
    "bcpkix": "1.78",
    "bcprovJdk18on": "1.78",
    "ccRoleDefinitions": "0.27.0",
    "celCore": "0.3.5",
    "caffeine": "2.9.3",
    "checkstyle": "8.36.2",
    "checker": "3.33.0",
    "commonsCli": "1.4",
    "commonsCodec": "1.16.1",
    "commonsCompress": "1.26.1",
    "commonsIo": "2.16.0",
    "commonsLang": "3.11",
    "commons-net": "3.9.0",
    "commonsPool": "2.11.1",
    "commonsValidator": "1.7",
    "cloudEvents": "2.3.0",
    "dropwizardMetrics": "4.1.12.1",
    "eventsSchema": "0.269.0",
    "googleCloudCore": "2.33.0",
    "googlecloudstorage": "2.37.0",
    "googleFindbugsAnnotations": "3.0.1",
    "googleHttpClient": "1.44.1",
    "gradle": "8.8",
    "gradleVersionsPlugin": "0.36.0",
    "grgit": "4.1.1",
    "httpclient": "4.5.14",
    "hibernateCore": "6.2.7.Final",
    "easymock": "5.2.0",
    "errorProne": "2.19.1",
    "failureaccess": "1.0.1",
    "flatbuffers": "2.0.3",
    "gax": "2.16.0",
    "gson": "2.9.0",
    "guava": "32.0.1-jre",
    "httpclient5": "5.2.1",
    "intellijAnnotations": "16.0.2",
    "jackson": "2.16.0",
    "jacksonDatabind": "2.16.0",
    "jacksonProtobufDatatype": "0.9.11-jackson2.9",
    "jsonUnit": "2.17.0",
    "jacoco": "0.8.10",
    "javassist": "3.29.2-GA",
    "jodaTime": "2.9.9",
    "jbcrypt": "0.4",
    "jetbrainsAnnotations": "16.0.2",
    "jetty": "9.4.54.v20240208",
    #### jettyServlets must not be upgraded until https://(broken link) is resolved ###
    "jettyServlets": "9.4.53.v20231009",
    "jersey": "2.39.1",
    "jgit": "5.12.0.202106070339-r",
    "jline": "3.25.1",
    "jmh": "1.37",
    # This is not in the dependencies.gradle file. The Gradle resolver was getting 2.8, and Bazel was getting 3.0.0,
    # causing a discrepancy in the ce-metrics shaded jar. So this was added to get the versions matching.
    "j2objc": "2.8",
    "hamcrest": "2.2",
    "HdrHistogram": "2.1.12",
    "httpCore": "4.4.16",
    "logredactorMetrics": "1.0.8",
    "scalaLogging": "3.9.5",
    "jakartaAnnotationApi": "1.3.5",
    "jakartaInject": "2.6.1",
    "jaxb": "2.3.3",
    "jaxrs": "2.1.6",
    "jaxAnnotations": "1.3.5",
    "jfreechart": "1.0.0",
    "jopt": "5.0.4",
    "jose4j": "0.9.4",
    "junit": "5.10.2",
    "junitPlatform": "1.10.0",
    "jsonSmart": "2.4.10",
    "scalacheck": "1.14.0",
    "k8sclientJava": "14.0.0",
    "jayway": "2.8.0",
    "jqwik": "1.7.4",
    "kafka_0100": "0.10.0.1",
    "kafka_0101": "0.10.1.1",
    "kafka_0102": "0.10.2.2",
    "kafka_0110": "0.11.0.3",
    "kafka_10": "1.0.2",
    "kafka_11": "1.1.1",
    "kafka_20": "2.0.1",
    "kafka_21": "2.1.1",
    "kafka_22": "2.2.2",
    "kafka_23": "2.3.1",
    "kafka_24": "2.4.1",
    "kafka_25": "2.5.1",
    "kafka_26": "2.6.3",
    "kafka_27": "2.7.2",
    "kafka_28": "2.8.2",
    "kafka_30": "3.0.2",
    "kafka_31": "3.1.2",
    "kafka_32": "3.2.3",
    "kafka_33": "3.3.2",
    "kafka_34": "3.4.1",
    "kafka_35": "3.5.2",
    "kafka_36": "3.6.2",
    "kafka_37": "3.7.1",
    "kotlin": "1.6.0",
    "lz4": "1.8.0",
    "math3": "3.6.1",
    "mavenArtifact": "3.9.6",
    "metrics": "2.2.0",
    # There is more complex selection logic for Mockito versions in Gradle, but for Bazel we have
    # a smaller support matrix. Scala 2.12 is dropping soon and we only build Java 17 (soon only 21)
    "mockito": "5.10.0",
    "netty": "4.1.111.Final",
    "nettyTcNative": "2.0.61.Final",
    "nettyTcNativeFips": "0.16.0",
    "nimbusJoseJwt": "9.37.2",
    "oauth2": "1.6.0",
    "okhttp": "4.12.0",
    "okio": "3.7.0",
    "opencensusProtoVersion": "0.2.0",
    "opentelemetryProtoVersion": "1.2.0-alpha",
    "opentelemetry": "1.39.0",
    "opentelemetrySemconv": "1.25.0-alpha",
    "owaspDepCheckPlugin": "6.0.3",
    "pcollections": "4.0.1",
    "picocli": "4.7.5",
    "powermock": "2.0.9",
    "protobuf": "3.25.1",  # Should match the version in WORKSPACE.bazel
    "protobufGrpc": "1.65.1",
    "projectReactor": "3.5.9",
    "reactorNetty": "1.1.13",
    "reflections": "0.10.2",
    "reload4j": "1.2.25",
    "rocksDB": "7.9.2",
    "s3mock": "0.2.6",
    "scalaCollectionCompat": "2.10.0",
    # When updating the scalafmt version please also update the version field in checkstyle/.scalafmt.conf. scalafmt now
    # has the version field as mandatory in its configuration, see
    # https://github.com/scalameta/scalafmt/releases/tag/v3.1.0.
    "scalafmt": "3.7.14",
    "scalaJava8Compat": "1.0.2",
    "scalatest": "3.0.8",
    "scoverage": "2.0.11",
    "servletApi": "3.1.0",
    "simpleclient": "0.12.0",
    "slf4j": "1.7.36",
    "snappy": "1.1.10.5",
    "snakeyaml": "2.0",
    "spiffe": "0.8.6",
    "spotbugs": "4.8.0",
    "swagger": "2.2.8",
    "telemetry": "3.1429.0",
    "testContainers": "1.17.6",
    "tink": "1.12.0",
    "tinkGcpKms": "1.9.0",
    "tomcatAnnotations": "6.0.53",
    "vertx": "4.4.4",
    "vertxCodeGen": "4.0.2",
    "wiremock": "2.33.2",
    "zinc": "1.9.2",
    "zookeeper": "3.8.4",
    "zstd": "1.5.6-3",
    "junitPlatformSuiteEngine": "1.10.2",
    "testcontainersKeycloak": "1.10.0",
    # Keep in sync with LOG4J_JSON_LAYOUT_VERSION variable in include/opt/caas/bin/launch
    "log4jjsonlayout": "0.1.0",
    # Keep in sync with DISK_USAGE_AGENT_VERSION variable in include/opt/caas/bin/launch
    "diskusageagent": "7.6.0-809",
    "utilitybelt": "7.6.0-84",
    "jolokiaJvm": "2.0.3",
}

_runtime_test_libs = {
    "junitJuperEngine": "org.junit.jupiter:junit-jupiter-engine:" + versions["junit"],
    "junitJupiterApi": "org.junit.jupiter:junit-jupiter-api:" + versions["junit"],
    "junitPlatformLauncher": "org.junit.platform:junit-platform-launcher:" + versions["junitPlatform"],
    "junitPlatformReporting": "org.junit.platform:junit-platform-reporting:" + versions["junitPlatform"],
    "junitVintageEngine": "org.junit.vintage:junit-vintage-engine:" + versions["junit"],
    "junitPlatformSuiteEngine": "org.junit.platform:junit-platform-suite-engine:" + versions["junitPlatformSuiteEngine"],
}

libs = _libs | _runtime_test_libs | {
    "akkaActor_2_13": "com.typesafe.akka:akka-actor_2.12:" + versions["akka"],
    "akkaActor_2_12": "com.typesafe.akka:akka-actor_2.12:" + versions["akka"],
    "amazonCrt": "software.amazon.awssdk.crt:aws-crt:" + versions["amazonCrt"],
    "amazonCrtLinuxAarch": maven.artifact(
        group = "software.amazon.awssdk.crt",
        artifact = "aws-crt",
        version = versions["amazonCrt"],
        classifier = "linux-aarch_64",
        packaging = "jar",
    ),
    "amazonCrtLinuxX86": maven.artifact(
        group = "software.amazon.awssdk.crt",
        artifact = "aws-crt",
        version = versions["amazonCrt"],
        classifier = "linux-x86_64",
        packaging = "jar",
    ),
    "amazonS3Client": "com.amazonaws:aws-java-sdk-s3:" + versions["amazonSdkVersion"],
    "amazonS3ClientV2": "software.amazon.awssdk:s3:" + versions["amazonSdkVersionV2"],
    "amazonStsClient": "com.amazonaws:aws-java-sdk-sts:" + versions["amazonSdkVersion"],
    "amazonStsClientV2": "software.amazon.awssdk:sts:" + versions["amazonSdkVersionV2"],
    "amazonAuthV2": "software.amazon.awssdk:auth:" + versions["amazonSdkVersionV2"],
    "amazonRegionsV2": "software.amazon.awssdk:regions:" + versions["amazonSdkVersionV2"],
    "amazonJavaSdkCore": "com.amazonaws:aws-java-sdk-core:" + versions["amazonSdkVersion"],
    "amazonSdkCoreV2": "software.amazon.awssdk:sdk-core:" + versions["amazonSdkVersionV2"],
    "activation": "jakarta.activation:jakarta.activation-api:" + versions["activation"],
    "apacheda": maven.artifact(
        group = "org.apache.directory.api",
        artifact = "api-all",
        version = versions["apacheda"],
        exclusions = [
            maven.exclusion(
                group = "xml-apis",
                artifact = "xml-apis",
            ),
            # `mina-core` is a transitive dependency for `apacheds` and `apacheda`.
            # It is safer to use from `apacheds` since that is the implementation.
            maven.exclusion(
                group = "org.apache.mina",
                artifact = "mina-core",
            ),
        ],
    ),
    "apachedaLdapCodec": "org.apache.directory.api:api-ldap-codec-standalone:" + versions["apachedaLdapCodec"],
    "apachedsCoreApi": "org.apache.directory.server:apacheds-core-api:" + versions["apacheds"],
    "apachedsInterceptorKerberos": maven.artifact(
        group = "org.apache.directory.server",
        artifact = "apacheds-interceptor-kerberos",
        version = versions["apacheds"],
        exclusions = [
            maven.exclusion(
                group = "org.bouncycastle",
                artifact = "bcprov-jdk15on",
            ),
        ],
    ),
    "apachedsProtocolShared": "org.apache.directory.server:apacheds-protocol-shared:" + versions["apacheds"],
    "apachedsProtocolKerberos": "org.apache.directory.server:apacheds-protocol-kerberos:" + versions["apacheds"],
    "apachedsProtocolLdap": maven.artifact(
        group = "org.apache.directory.server",
        artifact = "apacheds-protocol-ldap",
        version = versions["apacheds"],
        exclusions = [
            maven.exclusion(
                group = "org.bouncycastle",
                artifact = "bcprov-jdk15on",
            ),
        ],
    ),
    "apachedsLdifPartition": "org.apache.directory.server:apacheds-ldif-partition:" + versions["apacheds"],
    "apachedsMavibotPartition": "org.apache.directory.server:apacheds-mavibot-partition:" + versions["apacheds"],
    "apachesshd": "org.apache.sshd:sshd-common:" + versions["apachesshd"],
    "apachedsJdbmPartition": "org.apache.directory.server:apacheds-jdbm-partition:" + versions["apacheds"],
    "argparse4j": "net.sourceforge.argparse4j:argparse4j:" + versions["argparse4j"],
    "assertjCore": "org.assertj:assertj-core:" + versions["assertj"],
    "azureCore": "com.azure:azure-core:" + versions["azureCore"],
    "azureIdentity": maven.artifact(
        group = "com.azure",
        artifact = "azure-identity",
        version = versions["azureIdentity"],
        exclusions = [
            # Exclude simple-xml to resolve CVE-2017-1000190
            # This is only used by the IntelliJ credential provider plugin,
            # which we do not use currently.
            maven.exclusion(
                group = "org.simpleframework",
                artifact = "simple-xml",
            ),
            maven.exclusion(
                group = "net.minidev",
                artifact = "json-smart",
            ),
            maven.exclusion(
                group = "com.nimbusds",
                artifact = "nimbus-jose-jwt",
            ),
            maven.exclusion(
                group = "io.netty",
                artifact = "netty-tcnative-boringssl-static",
            ),
        ],
    ),
    "azureStorageBlob": maven.artifact(
        group = "com.azure",
        artifact = "azure-storage-blob",
        version = versions["azureStorageBlob"],
        exclusions = [
            maven.exclusion(
                group = "io.netty",
                artifact = "netty-tcnative-boringssl-static",
            ),
        ],
    ),
    "bazaarvoice": "com.bazaarvoice.jolt:json-utils:0.1.5",
    "bc_fips": "org.bouncycastle:bc-fips:" + versions["bc_fips"],
    "bcpkix": "org.bouncycastle:bcpkix-jdk18on:" + versions["bcpkix"],
    "bcpkix_fips": "org.bouncycastle:bcpkix-fips:" + versions["bcpkix_fips"],
    "bcprovJdk18on": "org.bouncycastle:bcprov-jdk18on:" + versions["bcprovJdk18on"],
    "bctls_fips": "org.bouncycastle:bctls-fips:" + versions["bctls_fips"],
    "caffeine": "com.github.ben-manes.caffeine:caffeine:" + versions["caffeine"],
    "celCore": "org.projectnessie.cel:cel-core:" + versions["celCore"],  # This is not in the dependencies.gradle file
    "checkstyle": "com.puppycrawl.tools:checkstyle:" + versions["checkstyle"],
    "checker": "org.checkerframework:checker-qual:" + versions["checker"],
    "cloudEventsApi": "io.cloudevents:cloudevents-api:" + versions["cloudEvents"],
    "cloudEventsCore": "io.cloudevents:cloudevents-core:" + versions["cloudEvents"],
    "cloudEventsKafka": maven.artifact(
        group = "io.cloudevents",
        artifact = "cloudevents-kafka",
        version = versions["cloudEvents"],
        exclusions = [
            maven.exclusion(
                group = "*",
                artifact = "kafka-clients",
            ),
        ],
    ),
    "cloudEventsJsonJackson": "io.cloudevents:cloudevents-json-jackson:" + versions["cloudEvents"],
    "cloudEventsProtobuf": "io.cloudevents:cloudevents-protobuf:" + versions["cloudEvents"],
    "commonsCli": "commons-cli:commons-cli:" + versions["commonsCli"],
    "commonsValidator": "commons-validator:commons-validator:" + versions["commonsValidator"],
    "commonsCodec": "commons-codec:commons-codec:" + versions["commonsCodec"],
    "commonsCompress": "org.apache.commons:commons-compress:" + versions["commonsCompress"],
    "commonsLang": "org.apache.commons:commons-lang3:" + versions["commonsLang"],
    "commonsPool": "org.apache.commons:commons-pool2:" + versions["commonsPool"],
    "commonsIo": "commons-io:commons-io:" + versions["commonsIo"],
    "commons-net": "commons-net:commons-net:" + versions["commons-net"],
    "easymock": "org.easymock:easymock:" + versions["easymock"],
    "errorProneAnnotations": "com.google.errorprone:error_prone_annotations:" + versions["errorProne"],
    "failureaccess": "com.google.guava:failureaccess:" + versions["failureaccess"],
    "flatbuffers": "com.google.flatbuffers:flatbuffers-java:" + versions["flatbuffers"],
    "googleHttpClient": "com.google.http-client:google-http-client:" + versions["googleHttpClient"],
    "googleCloudCore": "com.google.cloud:google-cloud-core:" + versions["googleCloudCore"],
    "googlecloudstorage": "com.google.cloud:google-cloud-storage:" + versions["googlecloudstorage"],
    "googleFindbugsAnnotations": "com.google.code.findbugs:annotations:" + versions["googleFindbugsAnnotations"],
    "gax": "com.google.api:gax:" + versions["gax"],
    "grpcCore": "io.grpc:grpc-core:" + versions["protobufGrpc"],
    "grpcApi": "io.grpc:grpc-api:" + versions["protobufGrpc"],
    "grpcNetty": "io.grpc:grpc-netty:" + versions["protobufGrpc"],
    "grpcInProcess": "io.grpc:grpc-inprocess:" + versions["protobufGrpc"],
    "grpcOpenTelemetry": "io.grpc:grpc-opentelemetry:" + versions["protobufGrpc"],
    "grpcProtobuf": "io.grpc:grpc-protobuf:" + versions["protobufGrpc"],
    "grpcStub": "io.grpc:grpc-stub:" + versions["protobufGrpc"],
    "grpcServices": "io.grpc:grpc-services:" + versions["protobufGrpc"],
    "grpcXds": "io.grpc:grpc-xds:" + versions["protobufGrpc"],
    "grpcAlts": "io.grpc:grpc-alts:" + versions["protobufGrpc"],
    "grpcRls": "io.grpc:grpc-rls:" + versions["protobufGrpc"],
    "grpcLb": "io.grpc:grpc-grpclb:" + versions["protobufGrpc"],
    "grpcGoogleapis": "io.grpc:grpc-googleapis:" + versions["protobufGrpc"],
    "gson": "com.google.code.gson:gson:" + versions["gson"],
    "guava": "com.google.guava:guava:" + versions["guava"],
    "guavaTestLib": "com.google.guava:guava-testlib:" + versions["guava"],
    "hibernateCore": "org.hibernate:hibernate-core:" + versions["hibernateCore"],
    "httpCore": "org.apache.httpcomponents:httpcore:" + versions["httpCore"],
    "intellijAnnotations": "org.jetbrains:annotations:" + versions["intellijAnnotations"],
    "jacksonAnnotations": "com.fasterxml.jackson.core:jackson-annotations:" + versions["jackson"],
    "jacksonCore": "com.fasterxml.jackson.core:jackson-core:" + versions["jackson"],
    "jacksonDatabind": "com.fasterxml.jackson.core:jackson-databind:" + versions["jacksonDatabind"],
    "jacksonCbor": "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:" + versions["jackson"],
    "jacksonDataformatCsv": "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:" + versions["jackson"],
    "jacksonDataformatYaml": "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:" + versions["jackson"],
    "jacksonDataformatProperties": "com.fasterxml.jackson.dataformat:jackson-dataformat-properties:" + versions["jackson"],
    "jacksonModuleScala_2.12": "com.fasterxml.jackson.module:jackson-module-scala_2.12" + ":" + versions["jackson"],
    "jacksonModuleScala_2.13": "com.fasterxml.jackson.module:jackson-module-scala_2.13" + ":" + versions["jackson"],
    "jacksonJDK8Datatypes": "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:" + versions["jackson"],
    "jacksonJsr310": "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:" + versions["jackson"],
    "jacksonJaxrsBase": "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:" + versions["jackson"],
    "jacksonJaxrsJsonProvider": "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:" + versions["jackson"],
    "jacksonAfterburner": "com.fasterxml.jackson.module:jackson-module-afterburner:" + versions["jackson"],
    "jacksonModuleJaxbAnnotations": "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:" + versions["jackson"],
    "jacksonModuleParanamer": "com.fasterxml.jackson.module:jackson-module-paranamer:" + versions["jackson"],
    "jacksonProtobufDatatype": "com.hubspot.jackson:jackson-datatype-protobuf:" + versions["jacksonProtobufDatatype"],
    "jakartaAnnotationApi": "jakarta.annotation:jakarta.annotation-api:" + versions["jakartaAnnotationApi"],
    "jakartaInject": "org.glassfish.hk2.external:jakarta.inject:" + versions["jakartaInject"],
    "jaxbApi": "jakarta.xml.bind:jakarta.xml.bind-api:" + versions["jaxb"],
    "jaxrsApi": "jakarta.ws.rs:jakarta.ws.rs-api:" + versions["jaxrs"],
    "jaxAnnotationApi": "jakarta.annotation:jakarta.annotation-api:" + versions["jaxAnnotations"],
    "javassist": "org.javassist:javassist:" + versions["javassist"],
    "jayway": "com.jayway.jsonpath:json-path:" + versions["jayway"],
    "jbcrypt": "org.mindrot:jbcrypt:" + versions["jbcrypt"],
    "jetbrainsAnnotations": "org.jetbrains:annotations:" + versions["jetbrainsAnnotations"],
    "jettyServer": "org.eclipse.jetty:jetty-server:" + versions["jetty"],
    "jettyClient": "org.eclipse.jetty:jetty-client:" + versions["jetty"],
    "jettyServlet": "org.eclipse.jetty:jetty-servlet:" + versions["jetty"],
    "jettyServlets": "org.eclipse.jetty:jetty-servlets:" + versions["jettyServlets"],
    "jerseyClient": "org.glassfish.jersey.core:jersey-client:" + versions["jersey"],
    "jerseyContainerServlet": "org.glassfish.jersey.containers:jersey-container-servlet:" + versions["jersey"],
    "jerseyCommon": "org.glassfish.jersey.core:jersey-common:" + versions["jersey"],
    "jerseyHk2": "org.glassfish.jersey.inject:jersey-hk2:" + versions["jersey"],
    "jerseyMediaJsonJackson": "org.glassfish.jersey.media:jersey-media-json-jackson:" + versions["jersey"],
    "jerseyServer": "org.glassfish.jersey.core:jersey-server:" + versions["jersey"],
    "jline": "org.jline:jline:" + versions["jline"],
    "jmhCore": "org.openjdk.jmh:jmh-core:" + versions["jmh"],
    "jmhCoreBenchmarks": "org.openjdk.jmh:jmh-core-benchmarks:" + versions["jmh"],
    "jmhGeneratorAnnProcess": "org.openjdk.jmh:jmh-generator-annprocess:" + versions["jmh"],
    "jodaTime": "joda-time:joda-time:" + versions["jodaTime"],
    "joptSimple": "net.sf.jopt-simple:jopt-simple:" + versions["jopt"],
    "jose4j": "org.bitbucket.b_c:jose4j:" + versions["jose4j"],
    "jsonUnit": "net.javacrumbs.json-unit:json-unit-assertj:" + versions["jsonUnit"],
    "jsonSmart": "net.minidev:json-smart:" + versions["jsonSmart"],
    "junitJupiter": "org.junit.jupiter:junit-jupiter:" + versions["junit"],
    "junitJupiterApi": "org.junit.jupiter:junit-jupiter-api:" + versions["junit"],
    "junitPlatformCommons": "org.junit.platform:junit-platform-commons:" + versions["junitPlatform"],
    "junitPlatformSuiteApi": "org.junit.platform:junit-platform-suite-api:" + versions["junitPlatform"],
    "junitVintageEngine": "org.junit.vintage:junit-vintage-engine:" + versions["junit"],
    "junitPlatformSuiteEngine": "org.junit.platform:junit-platform-suite-engine:" + versions["junitPlatformSuiteEngine"],
    "jqwik": "net.jqwik:jqwik:" + versions["jqwik"],
    "j2objc": "com.google.j2objc:j2objc-annotations:" + versions["j2objc"],
    "hamcrest": "org.hamcrest:hamcrest:" + versions["hamcrest"],
    "HdrHistogram": "org.hdrhistogram:HdrHistogram:" + versions["HdrHistogram"],
    "kotlinStdlib": "org.jetbrains.kotlin:kotlin-stdlib:" + versions["kotlin"],
    "kotlinStdlibCommon": "org.jetbrains.kotlin:kotlin-stdlib-common:" + versions["kotlin"],
    "kotlinStdlibJdk7": "org.jetbrains.kotlin:kotlin-stdlib-jdk7:" + versions["kotlin"],
    "kotlinStdlibJdk8": "org.jetbrains.kotlin:kotlin-stdlib-jdk8:" + versions["kotlin"],
    "log4j": "ch.qos.reload4j:reload4j:" + versions["reload4j"],
    "logredactorMetrics": "io.confluent:logredactor-metrics:" + versions["logredactorMetrics"],
    "lz4": "org.lz4:lz4-java:" + versions["lz4"],
    "math3": "org.apache.commons:commons-math3:" + versions["math3"],
    "metrics": "com.yammer.metrics:metrics-core:" + versions["metrics"],
    "dropwizardMetrics": "io.dropwizard.metrics:metrics-core:" + versions["dropwizardMetrics"],
    "mockitoCore": "org.mockito:mockito-core:" + versions["mockito"],
    "mockitoJunitJupiter": "org.mockito:mockito-junit-jupiter:" + versions["mockito"],
    "netty": "io.netty:netty-all:" + versions["netty"],
    "nettyBuffer": "io.netty:netty-buffer:" + versions["netty"],
    "nettyCodec": "io.netty:netty-codec:" + versions["netty"],
    "nettyCodecHttp": "io.netty:netty-codec-http:" + versions["netty"],
    "nettyCodecHttp2": "io.netty:netty-codec-http2:" + versions["netty"],
    "nettyCodecSocks": "io.netty:netty-codec-socks:" + versions["netty"],
    "nettyCommon": "io.netty:netty-common:" + versions["netty"],
    "nettyDnsResolver": "io.netty:netty-resolver-dns:" + versions["netty"],
    "nettyDnsResolverNativeMacOS": "io.netty:netty-resolver-dns-native-macos:" + versions["netty"],
    "nettyHandler": "io.netty:netty-handler:" + versions["netty"],
    "nettyHandlerProxy": "io.netty:netty-handler-proxy:" + versions["netty"],
    "nettyResolver": "io.netty:netty-resolver:" + versions["netty"],
    "nettyTcNative": "io.netty:netty-tcnative-boringssl-static:" + versions["nettyTcNative"],
    "nettyTcNativeClasses": "io.netty:netty-tcnative-classes:" + versions["nettyTcNative"],
    "nettyTransport": "io.netty:netty-transport:" + versions["netty"],
    "nettyTransportNativeEpoll": "io.netty:netty-transport-native-epoll:" + versions["netty"],
    "nettyTransportNativeKqueue": "io.netty:netty-transport-native-kqueue:" + versions["netty"],
    "nettyTransportNativeUnixCommon": "io.netty:netty-transport-native-unix-common:" + versions["netty"],
    "nimbusJoseJwt": "com.nimbusds:nimbus-jose-jwt:" + versions["nimbusJoseJwt"],
    "oauth2": "com.google.auth:google-auth-library-oauth2-http:" + versions["oauth2"],
    "okio": "com.squareup.okio:okio:" + versions["okio"],
    "opencensusProto": maven.artifact(
        group = "io.opencensus",
        artifact = "opencensus-proto",
        version = versions["opencensusProtoVersion"],
        exclusions = [
            maven.exclusion(
                group = "*",
                artifact = "grpc-protobuf",
            ),
            maven.exclusion(
                group = "*",
                artifact = "grpc-stub",
            ),
        ],
    ),
    "opentelemetryProto": "io.opentelemetry.proto:opentelemetry-proto:" + versions["opentelemetryProtoVersion"],
    "opentelemetryApi": "io.opentelemetry:opentelemetry-api:" + versions["opentelemetry"],
    "opentelemetrySdk": "io.opentelemetry:opentelemetry-sdk:" + versions["opentelemetry"],
    "opentelemetrySdkMetrics": "io.opentelemetry:opentelemetry-sdk-metrics:" + versions["opentelemetry"],
    "opentelemetrySdkTesting": "io.opentelemetry:opentelemetry-sdk-testing:" + versions["opentelemetry"],
    "opentelemetrySdkTrace": "io.opentelemetry:opentelemetry-sdk-trace:" + versions["opentelemetry"],
    "opentelemetryExporter": "io.opentelemetry:opentelemetry-exporter-otlp:" + versions["opentelemetry"],
    "opentelemetrySemconv": "io.opentelemetry.semconv:opentelemetry-semconv:" + versions["opentelemetrySemconv"],
    "opentelemetryContext": "io.opentelemetry:opentelemetry-context:" + versions["opentelemetry"],
    "pcollections": "org.pcollections:pcollections:" + versions["pcollections"],
    "picocli": "info.picocli:picocli:" + versions["picocli"],
    "projectnessie_core": "org.projectnessie.cel:cel-core:0.3.5",
    "projectReactor": "io.projectreactor:reactor-core:" + versions["projectReactor"],
    "projectReactorTest": "io.projectreactor:reactor-test:" + versions["projectReactor"],
    "powermockJunit4": "org.powermock:powermock-module-junit4:" + versions["powermock"],
    "powermockEasymock": "org.powermock:powermock-api-easymock:" + versions["powermock"],
    "protobuf": "com.google.protobuf:protobuf-java:" + versions["protobuf"],
    "protobufUtil": "com.google.protobuf:protobuf-java-util:" + versions["protobuf"],
    "reflections": "org.reflections:reflections:" + versions["reflections"],
    "rocksDBJni": "org.rocksdb:rocksdbjni:" + versions["rocksDB"],
    "s3mock_2_13": "io.findify:s3mock_2.13:" + versions["s3mock"],
    "s3mock_2_12": "io.findify:s3mock_2.12:" + versions["s3mock"],
    "scalaReflect": "org.scala-lang:scala-reflect:" + versions["scala"],
    "scalaLibrary": "org.scala-lang:scala-library:" + versions["scala"],
    "scalacompiler": "org.scala-lang:scala-compiler:" + versions["scala"],
    "scalaCollectionCompat_2.12": "org.scala-lang.modules:scala-collection-compat_2.12" + ":" + versions["scalaCollectionCompat"],
    "scalaCollectionCompat_2.13": "org.scala-lang.modules:scala-collection-compat_2.13" + ":" + versions["scalaCollectionCompat"],
    "scalaJava8Compat_2.12": "org.scala-lang.modules:scala-java8-compat_2.12" + ":" + versions["scalaJava8Compat"],
    "scalaJava8Compat_2.13": "org.scala-lang.modules:scala-java8-compat_2.13" + ":" + versions["scalaJava8Compat"],
    "scalacheck_2.12": "org.scalacheck:scalacheck_2.12" + ":" + versions["scalacheck"],
    "scalacheck_2.13": "org.scalacheck:scalacheck_2.13" + ":" + versions["scalacheck"],
    "scalaLogging_2.12": "com.typesafe.scala-logging:scala-logging_2.12" + ":" + versions["scalaLogging"],
    "scalaLogging_2.13": "com.typesafe.scala-logging:scala-logging_2.13" + ":" + versions["scalaLogging"],
    "scalatest_2.12": "org.scalatest:scalatest_2.12" + ":" + versions["scalatest"],
    "scalatest_2.13": "org.scalatest:scalatest_2.13" + ":" + versions["scalatest"],
    "scala-parser-combinators_2.12": "org.scala-lang.modules:scala-parser-combinators_2.12:2.1.0",
    "scala-parser-combinators_2.13": "org.scala-lang.modules:scala-parser-combinators_2.13:2.1.0",
    "scala-xml_2.12": "org.scala-lang.modules:scala-xml_2.12:2.1.0",
    "scala-xml_2.13": "org.scala-lang.modules:scala-xml_2.13:2.1.0",
    "servletApi": "javax.servlet:javax.servlet-api:" + versions["servletApi"],
    "simpleclient": "io.prometheus:simpleclient:" + versions["simpleclient"],
    "simpleclient_httpserver": "io.prometheus:simpleclient_httpserver:" + versions["simpleclient"],
    "slf4jApi": "org.slf4j:slf4j-api:" + versions["slf4j"],
    "slf4jSimple": "org.slf4j:slf4j-simple:" + versions["slf4j"],
    "slf4jNop": "org.slf4j:slf4j-nop:" + versions["slf4j"],
    "slf4jReload4j": "org.slf4j:slf4j-reload4j:" + versions["slf4j"],
    "snakeyaml": "org.yaml:snakeyaml:" + versions["snakeyaml"],
    "snappy": "org.xerial.snappy:snappy-java:" + versions["snappy"],
    "spiffeProvider": "io.spiffe:java-spiffe-provider:" + versions["spiffe"],
    "spiffeCore": "io.spiffe:java-spiffe-core:" + versions["spiffe"],
    "spiffeGrpcNettyLinux": "io.spiffe:grpc-netty-linux:" + versions["spiffe"],
    "spotbugs": "com.github.spotbugs:spotbugs:" + versions["spotbugs"],
    "spotbugsAnnotation": "com.github.spotbugs:spotbugs-annotations:" + versions["spotbugs"],
    "swaggerAnnotations": "io.swagger.core.v3:swagger-annotations:" + versions["swagger"],
    "swaggerJaxrs2": "io.swagger.core.v3:swagger-jaxrs2:" + versions["swagger"],
    "tink": "com.google.crypto.tink:tink:" + versions["tink"],
    "tinkGcpKms": "com.google.crypto.tink:tink-gcpkms:" + versions["tinkGcpKms"],
    "tomcatAnnotations": "org.apache.tomcat:annotations-api:" + versions["tomcatAnnotations"],
    "zookeeper": maven.artifact(
        group = "org.apache.zookeeper",
        artifact = "zookeeper",
        version = versions["zookeeper"],
        exclusions = [
            maven.exclusion(
                group = "*",
                artifact = "slf4j-log4j12",
            ),
            maven.exclusion(
                group = "*",
                artifact = "log4j",
            ),
            maven.exclusion(
                group = "*",
                artifact = "logback-classic",
            ),
            maven.exclusion(
                group = "*",
                artifact = "logback-core",
            ),
        ],
    ),
    "zookeeperJute": "org.apache.zookeeper:zookeeper-jute:" + versions["zookeeper"],
    "jfreechart": "jfreechart:jfreechart:" + versions["jfreechart"],
    "mavenArtifact": "org.apache.maven:maven-artifact:" + versions["mavenArtifact"],
    "zstd": "com.github.luben:zstd-jni:" + versions["zstd"],
    "httpclient": "org.apache.httpcomponents:httpclient:" + versions["httpclient"],
    "httpclient5": "org.apache.httpcomponents.client5:httpclient5:" + versions["httpclient5"],
    "k8sclientJava": maven.artifact(
        group = "io.kubernetes",
        artifact = "client-java",
        version = versions["k8sclientJava"],
        exclusions = [
            # clients package brings a newer version
            maven.exclusion(
                group = "*",
                artifact = "bcpkix-jdk15on",
            ),
            maven.exclusion(
                group = "*",
                artifact = "bcprov-ext-jdk15on",
            ),
            maven.exclusion(
                group = "*",
                artifact = "commons-compress",
            ),
        ],
    ),
    "testContainers": "org.testcontainers:junit-jupiter:" + versions["testContainers"],
    "testContainersKafka": "org.testcontainers:kafka:" + versions["testContainers"],
    "testContainersLocalStack": "org.testcontainers:localstack:" + versions["testContainers"],
    "testContainersMain": "org.testcontainers:testcontainers:" + versions["testContainers"],
    "vertx": "io.vertx:vertx-auth-oauth2:" + versions["vertx"],
    "vertxCodeGen": "io.vertx:vertx-codegen:" + versions["vertxCodeGen"],
    "wiremock": "com.github.tomakehurst:wiremock-jre8:" + versions["wiremock"],
    "okhttp": "com.squareup.okhttp3:okhttp:" + versions["okhttp"],
    "testcontainersKeycloak": "com.github.dasniko:testcontainers-keycloak:" + versions["testcontainersKeycloak"],
    "jolokiaJvm": maven.artifact(
        group = "org.jolokia",
        artifact = "jolokia-agent-jvm",
        version = versions["jolokiaJvm"],
        classifier = "javaagent",
        packaging = "jar",
        ## Jolokia is loaded on the JVM command line, and breaks when some of its compile-time dependencies
        ## (fetched by Maven) are in the classpath, so we need to explicilty remove those.
        exclusions = [
            "com.googlecode.json-simple:json-simple",
            "org.jolokia:jolokia-server-core",
            "org.jolokia:jolokia-server-core",
            "org.jolokia:jolokia-server-detector",
            "org.jolokia:jolokia-service-discovery",
            "org.jolokia:jolokia-service-history",
            "org.jolokia:jolokia-service-jmx",
            "org.jolokia:jolokia-service-jsr160",
            "org.jolokia:jolokia-service-notif-pull",
            "org.jolokia:jolokia-service-notif-sse",
            "org.jolokia:jolokia-service-serializer",
            "com.googlecode.json-simple:json-simple",
        ],
    ),
}

KAFKA_STREAMS_VERSIONS = {
    "kafka_streams_0100": "org.apache.kafka:kafka-streams:" + versions["kafka_0100"],
    "kafka_streams_0101": "org.apache.kafka:kafka-streams:" + versions["kafka_0101"],
    "kafka_streams_0102": "org.apache.kafka:kafka-streams:" + versions["kafka_0102"],
    "kafka_streams_0110": "org.apache.kafka:kafka-streams:" + versions["kafka_0110"],
    "kafka_streams_10": "org.apache.kafka:kafka-streams:" + versions["kafka_10"],
    "kafka_streams_11": "org.apache.kafka:kafka-streams:" + versions["kafka_11"],
    "kafka_streams_20": "org.apache.kafka:kafka-streams:" + versions["kafka_20"],
    "kafka_streams_21": "org.apache.kafka:kafka-streams:" + versions["kafka_21"],
    "kafka_streams_22": "org.apache.kafka:kafka-streams:" + versions["kafka_22"],
    "kafka_streams_23": "org.apache.kafka:kafka-streams:" + versions["kafka_23"],
    "kafka_streams_24": "org.apache.kafka:kafka-streams:" + versions["kafka_24"],
    "kafka_streams_25": "org.apache.kafka:kafka-streams:" + versions["kafka_25"],
    "kafka_streams_26": "org.apache.kafka:kafka-streams:" + versions["kafka_26"],
    "kafka_streams_27": "org.apache.kafka:kafka-streams:" + versions["kafka_27"],
    "kafka_streams_28": "org.apache.kafka:kafka-streams:" + versions["kafka_28"],
    "kafka_streams_30": "org.apache.kafka:kafka-streams:" + versions["kafka_30"],
    "kafka_streams_31": "org.apache.kafka:kafka-streams:" + versions["kafka_31"],
    "kafka_streams_32": "org.apache.kafka:kafka-streams:" + versions["kafka_32"],
    "kafka_streams_33": "org.apache.kafka:kafka-streams:" + versions["kafka_33"],
    "kafka_streams_34": "org.apache.kafka:kafka-streams:" + versions["kafka_34"],
    "kafka_streams_35": "org.apache.kafka:kafka-streams:" + versions["kafka_35"],
    "kafka_streams_36": "org.apache.kafka:kafka-streams:" + versions["kafka_36"],
    "kafka_streams_37": "org.apache.kafka:kafka-streams:" + versions["kafka_37"],
}

def maven_install_alternative_mockito():
    maven_install(
        name = "maven_alt_mockito_4_9",
        artifacts = [
            "org.mockito:mockito-inline:4.11.0",
            "org.mockito:mockito-junit-jupiter:4.11.0",
        ],
        fail_if_repin_required = True,
        repin_instructions = REPIN_INSTRUCTIONS,
        repositories = [
            "https://repo1.maven.org/maven2",
        ],
        use_credentials_from_home_netrc_file = True,
        version_conflict_policy = "pinned",
        maven_install_json = "@kafka//dependencies:maven_alt_mockito_4_9_install.json",
    )

    maven_install(
        name = "maven_alt_mockito_4_11",
        artifacts = [
            "org.mockito:mockito-inline:4.11.0",
            "org.mockito:mockito-junit-jupiter:4.11.0",
        ],
        fail_if_repin_required = True,
        fetch_sources = True,
        repin_instructions = REPIN_INSTRUCTIONS,
        repositories = [
            "https://repo1.maven.org/maven2",
        ],
        use_credentials_from_home_netrc_file = True,
        version_conflict_policy = "pinned",
        maven_install_json = "@kafka//dependencies:maven_alt_mockito_4_11_install.json",
    )

def maven_install_alternative_easymock():
    maven_install(
        name = "maven_alt_easymock_4_3",
        artifacts = [
            "org.easymock:easymock:4.3",
        ],
        fail_if_repin_required = True,
        repositories = [
            "https://repo1.maven.org/maven2",
        ],
        repin_instructions = REPIN_INSTRUCTIONS,
        use_credentials_from_home_netrc_file = True,
        version_conflict_policy = "pinned",
        maven_install_json = "@kafka//dependencies:maven_alt_easymock_4_3_install.json",
    )

def add_never_link(lib):
    if type(lib) == "string":
        group, artifact, version = lib.split(":")
        return maven.artifact(group = group, artifact = artifact, version = version, neverlink = True)
    elif type(lib) == "dict":
        # if lib is already a maven.artifact, just set neverLink=True
        neverlink_lib = dict(lib)
        neverlink_lib["neverlink"] = True
        return neverlink_lib
    else:
        fail("unexpected type for lib: " + type(lib))

def maven_install_compile_only():
    neverlink_libs = [add_never_link(l) for l in list(libs.values())]
    maven_install(
        name = "maven_compile_only",
        artifacts = neverlink_libs,
        excluded_artifacts = [
            "org.scala-lang:scala-library",
            "org.scala-lang:scala-reflect",
            "org.scala-lang:scala-compiler",
            "log4j:log4j",
        ],
        fail_if_repin_required = True,
        fetch_sources = True,
        repin_instructions = REPIN_INSTRUCTIONS,
        repositories = [
            "https://repo1.maven.org/maven2",
            "https://packages.confluent.io/maven/",
        ],
        use_credentials_from_home_netrc_file = True,
        version_conflict_policy = "pinned",
        maven_install_json = "@kafka//dependencies:maven_compile_only_install.json",
    )

def maven_install_kafka_streams_versions():
    for k, v in KAFKA_STREAMS_VERSIONS.items():
        name = "maven_" + k
        maven_install(
            name = name,
            artifacts = [
                v,
            ],
            fail_if_repin_required = True,
            repin_instructions = REPIN_INSTRUCTIONS,
            repositories = [
                "https://repo1.maven.org/maven2",
                "https://packages.confluent.io/maven/",
            ],
            use_credentials_from_home_netrc_file = True,
            maven_install_json = "@kafka//dependencies:" + name + "_install.json",
        )
